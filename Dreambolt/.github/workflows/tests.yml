name: 🧪 Test Suite & Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # Force pytest to use colors in CI
  FORCE_COLOR: 1
  PY_COLORS: 1

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    
    steps:
    - name: 📦 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: ⬆️ Upgrade pip
      run: |
        python -m pip install --upgrade pip wheel setuptools
    
    - name: 📥 Install dependencies
      run: |
        pip install -r requirements.txt
    
    - name: 🧪 Run tests with coverage
      run: |
        pytest \
          --cov=. \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-report=html \
          --cov-fail-under=95 \
          --tb=short \
          -v
    
    - name: 📊 Upload coverage reports to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
    
    - name: 📈 Upload coverage to artifacts
      if: matrix.python-version == '3.11'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/
        retention-days: 30

  lint:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: 📥 Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff mypy bandit[toml]
    
    - name: 🏃 Run Ruff linter
      run: |
        ruff check . --output-format=github
    
    - name: 🔧 Run Ruff formatter check
      run: |
        ruff format --check .
    
    - name: 🔒 Run security analysis with Bandit
      run: |
        bandit -r . -x tests/ -f json -o bandit-report.json || true
        bandit -r . -x tests/ --severity-level medium
    
    - name: 📊 Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: bandit-report.json
        retention-days: 30

  test-integration:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: 📦 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: 📥 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🔗 Run integration tests only
      run: |
        pytest tests/ -m integration -v --tb=short
    
    - name: 🖥️ Test CLI commands
      run: |
        python -m cli --help
        python -m cli --version
        python -m cli status
    
    - name: 📋 Test CLI ingest (dry run)
      run: |
        echo "id,name,age" > test_data.csv
        echo "1,Alice,25" >> test_data.csv
        echo "2,Bob,30" >> test_data.csv
        python -m cli ingest test_data.csv --dry-run --no-synth
    
    - name: 🔧 Test CLI version matrix compatibility
      run: |
        pytest tests/test_cli_version_matrix.py -v

  test-performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push'
    
    steps:
    - name: 📦 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: 📥 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: ⚡ Run performance tests
      run: |
        pytest tests/ -m slow --tb=short -v
    
    - name: 📊 Performance regression check
      run: |
        # Add performance regression checks here
        echo "Performance tests completed"

  test-matrix-os:
    name: 🌐 Multi-OS Tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11"]
    
    steps:
    - name: 📦 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 📥 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🧪 Run core tests
      run: |
        pytest tests/ -m "not slow" --tb=short

  coverage-gate:
    name: 📊 Coverage Gate
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: 📦 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: 📥 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🎯 Verify coverage threshold
      run: |
        pytest \
          --cov=. \
          --cov-report=term-missing \
          --cov-fail-under=95 \
          tests/
        
        echo "✅ Coverage gate passed: ≥95% line coverage achieved"
    
    - name: 📋 Generate coverage summary
      run: |
        pytest --cov=. --cov-report=json tests/
        python -c "
        import json
        with open('coverage.json') as f:
            cov = json.load(f)
            total = cov['totals']['percent_covered']
            print(f'📊 Total Coverage: {total:.1f}%')
            if total >= 95.0:
                print('✅ COVERAGE GATE PASSED')
            else:
                print('❌ COVERAGE GATE FAILED')
                exit(1)
        "

  publish-results:
    name: 📈 Publish Test Results
    runs-on: ubuntu-latest
    needs: [test, lint, test-integration, coverage-gate]
    if: always()
    
    steps:
    - name: 📦 Checkout repository
      uses: actions/checkout@v4
    
    - name: 📊 Download coverage artifacts
      uses: actions/download-artifact@v4
      with:
        name: coverage-report
        path: coverage-html/
      continue-on-error: true
    
    - name: 📋 Test Summary
      run: |
        echo "## 🧪 Test Suite Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.test.result == 'success' && '✅ PASS' || '❌ FAIL' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.lint.result == 'success' && '✅ PASS' || '❌ FAIL' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.test-integration.result == 'success' && '✅ PASS' || '❌ FAIL' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Coverage Gate (≥95%) | ${{ needs.coverage-gate.result == 'success' && '✅ PASS' || '❌ FAIL' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.test.result }}" = "success" ] && \
           [ "${{ needs.lint.result }}" = "success" ] && \
           [ "${{ needs.test-integration.result }}" = "success" ] && \
           [ "${{ needs.coverage-gate.result }}" = "success" ]; then
          echo "### 🎉 All Quality Gates Passed!" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Ready for production deployment**" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ⚠️ Quality Gate Failures Detected" >> $GITHUB_STEP_SUMMARY
          echo "❌ **Address failures before merging**" >> $GITHUB_STEP_SUMMARY
        fi 