version: '3.8'

services:
  # Main benchmark application
  benchmark-suite:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8501:8501"
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    env_file:
      - .env
    volumes:
      - ./benchmark_results:/app/benchmark_results
      - ./logs:/app/logs
      # Mount .env if it exists locally
      - ./.env:/app/.env:ro
    networks:
      - benchmark-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Development environment with mounted source code
  benchmark-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    ports:
      - "8502:8501"
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_RUN_ON_SAVE=true
    env_file:
      - .env
    volumes:
      # Mount source code for development
      - ./src:/app/src
      - ./benchmarks:/app/benchmarks
      - ./scripts:/app/scripts
      - ./benchmark_results:/app/benchmark_results
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    networks:
      - benchmark-network
    restart: unless-stopped
    profiles:
      - dev
    command: ["python", "-m", "streamlit", "run", "src/python/src/main.py", "--server.port=8501", "--server.address=0.0.0.0", "--server.runOnSave=true"]

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - benchmark-suite
    networks:
      - benchmark-network
    restart: unless-stopped
    profiles:
      - production

  # Optional: PostgreSQL for storing benchmark results
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: benchmark_results
      POSTGRES_USER: benchmark_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-defaultpass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - benchmark-network
    restart: unless-stopped
    profiles:
      - storage
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U benchmark_user -d benchmark_results"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Optional: Redis for caching and session storage
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - benchmark-network
    restart: unless-stopped
    profiles:
      - caching
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - benchmark-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Optional: Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-grafana123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - benchmark-network
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  benchmark-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local